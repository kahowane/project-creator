#!/bin/bash

## -------------------------------------------------------------------------------------------- ##
##                                            Colors                                            ##
## -------------------------------------------------------------------------------------------- ##

normal=$'\e[0m'
bold=$'\e[1m'

rouge=$'\e[31m'
vert=$'\e[32m'



## -------------------------------------------------------------------------------------------- ##
##                                           Functions                                          ##
## -------------------------------------------------------------------------------------------- ##

question() {
  text="$vert?$normal $bold$1?$normal"
  if [ "$2" != "" ]; then
    text="$text ($2)"
  fi

  read -p "$text " value

  if [ "$value" == "" ]; then
    echo $3
  fi

  echo $value
}

formatProjectName () {
  echo $1 | sed -e "s/\b\(.\)/\U\1/g" | sed "s/[[:space:]]*//g"
}

formatProjectLabel () {
  echo $1 | sed "s/./\L&/g" | sed "s/[[:space:]]*//g"
}

formatProjectFolder () {
  echo $1 | sed "s/./\L&/g"
}

formatProjectDirectory () {
  echo $1 | sed -e "s/.*(\/)$//g"
}

checkInstalledPackage () {
  type $1 &> /dev/null || packageNotFound "$1"
}

packageNotFound () {
  echo "$rouge$1 is required.$normal"
  exit 1
}

toBoolean () {
  case "$1" in
    y|Y) echo true ;;
    *) echo false ;;
  esac
}



## -------------------------------------------------------------------------------------------- ##
##                                             Forms                                            ##
## -------------------------------------------------------------------------------------------- ##

checkInstalledPackage "npm"

appName=$(formatProjectName "$(question "Project name" "app" "app")")
appLabel=$(formatProjectLabel "$appName")
appFolder=$(formatProjectFolder "$appName")

appDirectory=$(formatProjectDirectory "$(question "Project directory" "." ".")")

git=$(toBoolean "$(question "Do you want to initialize git" "y/N" "n")")

if [ "$git" == "true" ]; then
  checkInstalledPackage "git"
  gitRemote=$(question "What is your git remote address")
  gitName=$(question "What is your git user.name")
  gitEmail=$(question "What is your git user.email")
fi

# ci=$(question "Do you want a CI configuration" "none" "gitlab|travis|github|none")

front=$(toBoolean "$(question "Do you what to generate an angular frontend" "y/N" "n")")

if [ "$front" == "true" ]; then
    checkInstalledPackage "ng"
    pwa=$(toBoolean "$(question "Do you want a Progressive Web App" "y/N" "n")")
fi

back=$(toBoolean "$(question "Do you what to generate an express backend" "y/N" "n")")

## -------------------------------------------------------------------------------------------- ##
##                                        Install project                                       ##
## -------------------------------------------------------------------------------------------- ##

mkdir -p "$appDirectory/$appFolder"
cd "$appDirectory/$appFolder"

if [ "$git" == "true" ]; then
  git init --quiet
  if [ "$gitRemote" != "" ]; then
    git remote add origin $gitRemote
    git push -u origin --all
  fi
  if [ "$gitName" != "" ]; then
    git config user.name "$gitName"
  fi
  if [ "$gitEmail" != "" ]; then
    git config user.email "$gitEmail"
  fi
fi

tee README.md &> /dev/null << EOL
# $appName

## Frontend

This application is running with $readme1 frontend.

## Backend
EOL

tee .gitignore &> /dev/null << EOL
**/dist
EOL

tee .editorconfig &> /dev/null << EOL
root = true

[*]
indent_style = space
indent_size = 2
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true
EOL



## -------------------------------------------------------------------------------------------- ##
##                                          Install CI                                          ##
## -------------------------------------------------------------------------------------------- ##



## -------------------------------------------------------------------------------------------- ##
##                                         Install infra                                        ##
## -------------------------------------------------------------------------------------------- ##



## -------------------------------------------------------------------------------------------- ##
##                                         Install front                                        ##
## -------------------------------------------------------------------------------------------- ##

if [ "$front" == "true" ]; then
  mkdir front
  cd front
  ng new $appLabel --skipGit=true --directory=.
  if [ "$pwa" == "true" ]; then
    ng add @angular/pwa
  fi
  cd ..
fi



## -------------------------------------------------------------------------------------------- ##
##                                         Install back                                         ##
## -------------------------------------------------------------------------------------------- ##

if [ "$back" == "true" ]; then
  mkdir back
  cd back

  tee package.json &> /dev/null << EOL
{
  "name": "back",
  "version": "1.0.0",
  "description": "",
  "scripts": {
    "tsc": "tsc",
    "start": "ts-node --transpile-only ./src/server.ts",
    "test": "jest",
    "prod": "tsc && node ./dist/server.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
  },
  "devDependencies": {
  }
}
EOL

  npm install --save express body-parser consistency dotenv
  npm install --save-dev @types/node @types/express typescript ts-node @types/dotenv jest ts-jest @types/jest

  tee swagger.yml &> /dev/null << EOL
openapi: "3.0.0"

info:
  title: "Title"
  description: "Description"
  version: "1.0.0"

servers:
- url: "https://api.example.com/v1"

tags:
- name: Tag1
  description: "Description tag1"

paths:
  /:
    get:
      tags:
        - Tag1
      description: "Get all"
      responses:
        '200':
          description: "Description response"
    post:
      tags:
        - Tag1
      description: "Post"
      responses:
        '200':
          description: "Description response"
    put:
      tags:
        - Tag1
      description: "Put"
      responses:
        '200':
          description: "Description response"
    patch:
      tags:
        - Tag1
      description: "Patch"
      responses:
        '200':
          description: "Description response"
  /{id}:
    get:
      tags:
        - Tag1
      description: "Get one"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: "Description response"
    delete:
      tags:
        - Tag1
      description: "Delete one"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: "Description response"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
EOL

  tee jest.config.js &> /dev/null << EOL
// For a detailed explanation regarding each configuration property, visit:
// https://jestjs.io/docs/en/configuration.html

module.exports = {
  globals: {
    'ts-jest': {
      tsConfig: 'test/tsconfig.json'
    }
  },
  moduleFileExtensions: [
    'ts',
    'js'
  ],
  transform: {
    '^.+\\.(ts|tsx)$': 'ts-jest'
  },
  testMatch: [
    '**/test/**/*.test.(ts|js)'
  ],
  testEnvironment: 'node'
};
EOL

  tee tsconfig.json &> /dev/null << EOL
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "pretty": true,
    "sourceMap": true,
    "outDir": "dist",
    "baseUrl": ".",
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "allowJs": true,
    "resolveJsonModule": true,
    "paths": {
      "*": [
        "node_modules/*"
      ]
    }
  },
  "include": [
    "src/**/*"
  ],
  "exclude": [
    "test/**/*"
  ]
}
EOL

  tee .env.example &> /dev/null << EOL
APP_NAME=App
APP_ENV=local
APP_DEBUG=false
APP_PORT=3000

#HOSTNAME=
#PORT=
#DB_NAME=App
#USERNAME=app
#PASSWORD=password
EOL

  tee .env &> /dev/null << EOL
APP_NAME=App
APP_ENV=local
APP_DEBUG=true
APP_PORT=3000
EOL

  tee -a Dockerfile.dev &> /dev/null << EOL
FROM node:lts

WORKDIR /usr/src

COPY package.json /usr/src/
RUN npm install

COPY . /usr/src/

EXPOSE 3000

CMD [ "npm", "run", "start" ]
EOL

    tee -a Dockerfile.prod &> /dev/null << EOL
### =============== ###
###     STAGE 1     ###
### =============== ###
FROM node:lts AS builder

WORKDIR /usr/src

COPY package*.json /usr/src/
RUN npm install

COPY . /usr/src/

RUN npm run build



### =============== ###
###     STAGE 2     ###
### =============== ###
FROM node:lts

WORKDIR /usr/app

COPY package*.json /usr/app/
RUN npm install --production

ENV APP_PORT=3000

ENV NODE_ENV=production

EXPOSE \$APP_PORT

RUN mkdir dist

COPY --from=builder /usr/src/dist /usr/app

COPY --from=builder /usr/src/.sequelizerc /usr/app/

CMD ["npm", "run", "start:prod"]
EOL

  tee -a .dockerignore &> /dev/null << EOL
.env
.env.example
.git
.gitignore
**/*.md
*.log
node_modules
docker-compose*
Dockerfile
dist
tests
EOL

  mkdir src

  tee src/app.ts &> /dev/null << EOL
import express from 'express';
import { Application } from 'express';

class App {
  public app: Application;
  public port: number;

  constructor(
    private appInit: { port: number; middleWares: any; controllers: any; }
  ) {
    this.app = express();
    this.port = this.appInit.port

    this.middlewares(this.appInit.middleWares);
    this.routes(this.appInit.controllers);
  }

  private middlewares(middleWares: { forEach: (arg0: (middleWare: any) => void) => void; }) {
    middleWares.forEach(middleWare => {
      this.app.use(middleWare);
    });
  }

  private routes(controllers: { forEach: (arg0: (controller: any) => void) => void; }) {
    controllers.forEach(controller => {
      this.app.use('/', controller.router);
    });
  }

  public listen() {
    this.app.listen(this.port, () => {
      console.log(`App listening on the http://localhost:${this.port}`)
    })
  }
}

export default App;
EOL

  tee src/server.ts &> /dev/null << EOL
import App from './app';

import * as bodyParser from 'body-parser';

import config from './config/config';

import loggerMiddleware from './middleware/logger';
import tokenMiddleware from './middleware/token';

import HomeController from './controllers/home/home.controller';

const app: App = new App({
  port: config.app.port,
  middleWares: [
    bodyParser.json(),
    bodyParser.urlencoded({ extended: true }),
    loggerMiddleware,
    tokenMiddleware,
  ],
  controllers: [
    new HomeController(),
  ],
});

app.listen();
EOL

  mkdir src/config

  tee src/config/config.ts &> /dev/null << EOL
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config(
    { path:'.env' }
  );
}

const config = {
  app: {
    env: process.env.APP_ENV || 'prod',
    name: process.env.APP_NAME || 'App',
    port: <number><unknown>process.env.APP_PORT || 3000,
  },
  database: {
    database: process.env.RDS_DB_NAME || 'app',
    host: process.env.RDS_HOSTNAME || '127.0.0.1',
    password: process.env.RDS_PASSWORD || 'password',
    port: <number><unknown>process.env.RDS_PORT || 7000,
    username: process.env.RDS_USERNAME || 'app',
  },
};

export default config;
EOL

  mkdir src/middleware

  tee src/middleware/logger.ts &> /dev/null << EOL
import { Request, Response } from 'express';

const loggerMiddleware: Function = (req: Request, resp: Response, next: Function) => {
  console.log('Request logged:', req.method, req.path);
  next();
}

export default loggerMiddleware;
EOL

  tee src/middleware/token.ts &> /dev/null << EOL
import { Request, Response } from 'express';

const tokenMiddleware: Function = (req: Request, resp: Response, next: Function) => {
  const token = req.get('Authorization');
  if (!token) next({status: 401, message: 'Authorization header is required'});
  req.payload = jwt.decode(token);
  next();
}

export default loggerMiddleware;
EOL

  mkdir src/interfaces

  tee src/interfaces/IControllerBase.interface.ts &> /dev/null << EOL
interface IControllerBase {
  initRoutes(): any;
}

export default IControllerBase;
EOL

  mkdir src/controllers

  mkdir src/controllers/home

  tee src/controllers/home/home.controller.ts &> /dev/null << EOL
import express from 'express';
import { Request, Response } from 'express';

import IControllerBase from '../../interfaces/IControllerBase.interface';

class HomeController implements IControllerBase {
  public path = '/';
  public router = express.Router();

  constructor() {
    this.initRoutes();
  }

  public initRoutes() {
    this.router.get('/', this.index);
  }

  index = (req: Request, res: Response) => {

    const users = [
      {
        id: 1,
        name: 'Ali'
      },
      {
        id: 2,
        name: 'Can'
      },
      {
        id: 3,
        name: 'Ahmet'
      }
    ];

    res.json(users);
  }
}

export default HomeController;
EOL

  mkdir test

  tee test/tsconfig.json &> /dev/null << EOL
{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "target": "es6",
    "moduleResolution": "node",
    "sourceMap": true,
    "outDir": "dist",
    "baseUrl": ".",
    "allowSyntheticDefaultImports": true,
    "types": ["node", "jest"],
    /* for sequelize-typescript*/
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "resolveJsonModule": true,
    "allowJs": true,
    "paths": {
      "*": [
        "node_modules/*"
      ]
    }
  },
  "include": [
    "src/**/*",
  ]
}
EOL
fi
