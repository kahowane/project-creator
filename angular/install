#!/bin/bash

##
## Variables
##

gotRemote="";
gitName="";
gitEmail="";

appName="app";
appDirectory=".";
appStyle="scss";
appRouting=true;
appPWA=0;

##
## Functions
##

usage() {
  echo " usage: $0";
  echo " ======================================================================================================= ";
  echo "   Application parameters                                                                                ";
  echo "     --name | -n       <app name>               -> Application name       -> Default app                 ";
  echo "     --directory | -d  <app directory>          -> Application directory  -> Default .                   ";
  echo "     --style           css|scss|sass|less|styl  -> Application style      -> Default scss                ";
  echo "     --routing         true|false               -> Application routing    -> Default true                ";
  echo "     --pwa                                      -> Progressive web app    -> Default false               ";
  echo "   Git parameters                                                                                        ";
  echo "     --git-remote      <git remote adress>      -> Git remote                                            ";
  echo "     --git-name        <git user name>          -> Git user.name                                         ";
  echo "     --git-email       <git user email>         -> Git user.email                                        ";
  echo " ======================================================================================================= ";
  echo "   --help | -h                                  -> Help                                                  ";
  exit 0;
}

setName() {
  appName="$1";
}

setDirectory() {
  appDirectory="$1";
}

setStyle() {
  appStyle="$1";
}

##
## Options
##

while getopts "n:d:-:h" option; do
  case "$option" in
    -)
      case "$OPTARG" in
        name)
          setName "${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        directory)
          setDirectory "${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        style)
          setStyle "${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        routing)
          appRouting="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        pwa)
          appPWA=1;
          ;;
        git-remote)
          gitRemote="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        git-name)
          gitName="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        git-email)
          gitEmail="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
          ;;
        help)
          usage;
          ;;
      esac
      ;;
    n)
      setName $OPTARG;
      ;;
    d)
      setDirectory $OPTARG;
      ;;
    h|\?)
      usage;
      ;;
  esac
done

##
## Environment controls
##

if [ git --version &> /dev/null ]; then
  echo "Git is required";
  exit 1;
fi

if [ node --version &> /dev/null ]; then
  echo "NodeJS is required";
  exit 1;
fi

if [ npm --version &> /dev/null ]; then
  echo "NPM is required";
  exit 1;
fi

if [ ng --version &> /dev/null ]; then
  npm install @angular/cli -g;
fi

##
## Application
##

if [ "$appDirectory" != "." ]; then
  mkdir $appDirectory;
fi

cd "$appDirectory";

git init --quiet;

if [ "$gitRemote" != "" ]; then
  git remote add origin $gitRemote;
  git push -u origin --all;
fi
if [ "$gitName" != "" ]; then
  git config user.name "$gitName";
fi
if [ "$gitEmail" != "" ]; then
  git config user.email "$gitEmail";
fi

##
## Frontend
##

mkdir "front";

ng new $appName --skipGit=true --prefix=$appName --style=$appStyle --directory=front --routing=$appRouting;

if [ $appPWA == 1 ]; then
  cd front;
  ng add @angular/pwa;
  cd ..;
fi

##
## Backend
##

mkdir "back";
mkdir "back/tests";
mkdir "back/src";
mkdir "back/src/controllers";
mkdir "back/src/routes";

cd "back";

npm init -y &> /dev/null;

sed -i "s/back/$(grep name ../front/package.json | sed -e "s/\"name\": \"\(.*\)\",/\1/g" | sed "s/[[:blank:]]*//g")/g" package.json

npm install express body-parser;
npm install --save-dev typescript ts-node @types/express @types/node jest;

tee -a tsconfig.json &> /dev/null << EOL
{
  "compilerOptions": {
    "module": "commonjs",
    "moduleResolution": "node",
    "pretty": true,
    "sourceMap": true,
    "target": "es6",
    "outDir": "./dist",
    "baseUrl": "./src"
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules"]
}
EOL

tee -a .gitignore &> /dev/null << EOL
dist
EOL

tee -a .dockerignore &> /dev/null << EOL
dist
tests
EOL

tee -a Dockerfile &> /dev/null << EOL

EOL

tee -a src/server.ts &> /dev/null << EOL
import app from "./app";
const PORT = process.env.PORT || 3000;

app.listen(PORT, () => console.log(`Example app listening on port ${PORT}!`));
EOL

tee -a src/app.ts &> /dev/null << EOL
import * as express from "express";
import * as bodyParser from "body-parser";
import { Routes } from "./routes";

class App {
  public app: express.Application;
  public routePrv: Routes = new Routes();

  constructor() {
    this.app = express();
    this.config();
    this.routePrv.routes(this.app);
  }

  private config(): void {
    this.app.use(bodyParser.json());
    this.app.use(bodyParser.urlencoded({ extended: false }));
  }
}

export default new App().app;
EOL

tee -a src/controllers/nodes.controller.ts &> /dev/null << EOL
import { Request, Response } from "express";

export class NodesController {
  public index(req: Request, res: Response) {
    res.json({
      message: "Hello there!"
    });
  }
}
EOL

tee -a src/routes/index.ts &> /dev/null << EOL
import { Request, Response } from "express";
import { NodesController } from "../controllers/nodes.controller";

export class Routes {
  public nodesController: NodesController = new NodesController();

  public routes(app): void {
    app.route("/").get(this.nodesController.index);

    app.route("/nodes").get(this.nodesController.index);
  }
}
EOL
